import telebot
from telebot import types
import sqlite3

import config
from deckDb import DeckDb

# –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
db = sqlite3.connect('test_db.sqlite', check_same_thread=False)

# –ø–æ–¥–∫–ª—é—á–∞–µ–º
bot = telebot.TeleBot(config.TOKEN)


# –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def welcome(message):
    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üé≤ –ò–≥—Ä–∞—Ç—å –≤ –û—á–∫–æ: 2Ô∏è‚É£1Ô∏è‚É£")
    item2 = types.KeyboardButton("üéØ–¶–µ–ª—å –∏–≥—Ä—ãüéØ")
    markup.add(item1, item2)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    bot.send_message(message.chat.id,
                     "{0.first_name}, –ø—Ä–∏–≤–µ—Ç—Å–≤—É—é —Ç–µ–±—è!\n–Ø - {1.first_name}.\n–°—ã–≥—Ä–∞–π –≤ –∏–≥—Ä—É –∏ –Ω–∞–±–µ—Ä–∏ —Ä–æ–≤–Ω–æ 2Ô∏è‚É£1Ô∏è‚É£ –æ—á–∫–æ.\n–ñ–µ–ª–∞—é —É–¥–∞—á–∏! ".format(
                         message.from_user, bot.get_me( )), reply_markup=markup)


# –ö–Ω–æ–ø–∫–∏
@bot.message_handler(content_types=['text'])
def first_keyboard(message):
    if message.chat.type == 'private':
        if message.text == 'üéØ–¶–µ–ª—å –∏–≥—Ä—ãüéØ':
            bot.send_message(message.chat.id,
                             '–¶–µ–ª—å –∏–≥—Ä—ã - –Ω–∞–±—Ä–∞—Ç—å –≤ —Å—É–º–º–µ 21 –æ—á–∫–æ.ü§ó\n–ö–∞—Ä—Ç—ã J, D, K - –¥–∞—é—Ç 2, 3, 4 –æ—á–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–Ω–Ω–æ;\nA - 11 –æ—á–∫–æ–≤;\n6, 7, 8, 9, 10 - –¥–∞—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, —Ä–∞–≤–Ω–æ–µ —Ä–∞–Ω–≥—É.\n–ñ–µ–ª–∞—é —É–¥–∞—á–∏üòâ')
        elif message.text == 'üé≤ –ò–≥—Ä–∞—Ç—å –≤ –û—á–∫–æ: 2Ô∏è‚É£1Ô∏è‚É£':
            # —É–¥–∞–ª–µ–Ω–∏–µ
            create = DeckDb(db, message.chat.id)
            create.create_table( )
            dest = DeckDb(db, message.chat.id)
            dest.destroyDeck()

            # –≤—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏
            markup = types.InlineKeyboardMarkup(row_width=2)
            item3 = types.InlineKeyboardButton("–ë–µ—Ä—É –∫–∞—Ä—Ç—É", callback_data='eshe')
            item4 = types.InlineKeyboardButton("–•–≤–∞—Ç–∏—Ç", callback_data='stop')
            markup.add(item3, item4)
            # —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫ –∫–æ–ª–æ–¥—ã
            deck = DeckDb(db, message.chat.id)
            deck.makeDbDeck( )
            bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π:', reply_markup=markup)
            # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –∞–π–¥–∏ –ø–æ–ª—å–∑–∞–≤–∞—Ç–µ–ª—è.

        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å')


# —Ä–∞–∑–¥–∞—á–∞
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'eshe':

                # –ø–µ—Ä–µ–¥–∞—ë–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                deck = DeckDb(db, call.message.chat.id)
                deck1 = deck.takeDbCard(1)
                rank = deck1[1]
                kind = deck1[2]
                if kind == 'S':
                    kind = '‚ô†'
                elif kind == 'H':
                    kind = '‚ô•'
                elif kind == 'D':
                    kind = '‚ô¶'
                elif kind == 'C':
                    kind = '‚ô£'
                if rank == 2:
                    rank = 'J'
                elif rank == 3:
                    rank = 'D'
                elif rank == 4:
                    rank = 'K'
                elif rank == 11:
                    rank = 'A'

                summa = DeckDb(db, call.message.chat.id)
                user_summa = summa.sum(1)
                s = (user_summa[0])
                # —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –±–æ—Ç–∞
                k = DeckDb(db, call.message.chat.id)
                k1 = k.botCards(2)

                markup = types.InlineKeyboardMarkup(row_width=2)
                item2 = types.InlineKeyboardButton("–ë–µ—Ä—É –∫–∞—Ä—Ç—É", callback_data='eshe')
                item3 = types.InlineKeyboardButton("–•–≤–∞—Ç–∏—Ç", callback_data='stop')
                markup.add(item2, item3)

                bot.send_message(call.message.chat.id,
                                 '–¢–µ–±–µ –ø–æ–ø–∞–ª–∞—Å—å –∫–∞—Ä—Ç–∞ %s %s! \n–í—Å–µ–≥–æ –æ—á–∫–æ–≤ - %d.' % (rank, kind, s),
                                 reply_markup=markup)



            elif call.data == 'stop':

                # —Å—É–º–º–∞ —É –±–æ—Ç–∞
                summa_b = DeckDb(db, call.message.chat.id)
                bot_summa = summa_b.sum(2)
                s_b = int(bot_summa[0] or 0)
                list_ranks = []
                while s_b < 17:
                    deckBt = DeckDb(db, call.message.chat.id)
                    deckBot2 = deckBt.takeDbCard(2)
                    list_ranks.append(deckBot2[1])
                    s_b = sum(list_ranks)

                # —Å—É–º–º–∞ —É –ø–æ–ª—å–æ–≤–∞—Ç–µ–ª—è
                summa_u = DeckDb(db, call.message.chat.id)
                user_summa = summa_u.sum(1)
                s = (user_summa[0])
                # —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –±–æ—Ç–∞
                list_bot = DeckDb(db, call.message.chat.id)
                lis = list_bot.botCards(2)
                l = []
                for i in lis:
                    b = list(i)
                    for j in b:
                        if b[1] == 'H':
                            b[1] = '‚ô•'
                        elif b[1] == 'D':
                            b[1] = '‚ô¶'
                        elif b[1] == 'S':
                            b[1] = '‚ô†'
                        elif b[1] == 'C':
                            b[1] = '‚ô£'
                        elif b[0] == 2:
                            b[0] = 'J'
                        elif b[0] == 3:
                            b[0] = 'D'
                        elif b[0] == 4:
                            b[0] = 'K'
                        elif b[0] == 11:
                            b[0] = 'A'
                    l.append(b)
                l2 = str(l).strip('[]')
                liststr = ('[' + l2 + ']')

                bot.send_message(call.message.chat.id,
                                 '–£ —Ç–µ–±—è %d –æ—á–∫–æ–≤ –∏ —Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª –∏–≥—Ä—É. \n–ê –±–æ—Ç –Ω–∞–±—Ä–∞–ª %d. \n–û–Ω –≤—ã—Ç–∞—â–∏–ª - \n%s ' % (
                                     s, s_b, liststr))
                # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤
                if s == s_b:
                    bot.send_message(call.message.chat.id,
                                     '–£ –≤–∞—Å –Ω–∏—á—å—è! \n–í–æ—Ç —ç—Ç–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µüòâ.')
                elif s == 21:
                    bot.send_message(call.message.chat.id,
                                     '–ü–æ–∑–¥—Ä–∞–≤–ª—è—éü•≥!\n–¢—ã –Ω–∞–±—Ä–∞–ª 2Ô∏è‚É£1Ô∏è‚É£ –∏ –ø–æ–±–µ–¥–∏–ª –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!')
                elif s_b == 21:
                    bot.send_message(call.message.chat.id,
                                     '–ë–æ—Ç –Ω–∞–±—Ä–∞–ª 2Ô∏è‚É£1Ô∏è‚É£ –∏ –ø–æ–±–µ–¥–∏–ª –≤ —ç—Ç–æ–π –∏–≥—Ä–µ! \n–ê —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑üòú!')
                elif s > 21 and s_b > 21:
                    bot.send_message(call.message.chat.id,
                                     '–ò —Ç—ã –∏ –ë–æ—Ç –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ, –Ω–∞–±—Ä–∞–≤ –±–æ–ª—å—à–µ 2Ô∏è‚É£1Ô∏è‚É£. \n–ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑üòú!')
                elif s < 21 and s_b < 21:
                    if (21 - s) > (21 - s_b):
                        bot.send_message(call.message.chat.id,
                                         '–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –≤ —ç—Ç–æ–π –∏–≥—Ä–µ, \n–ë–æ—Ç –±—ã–ª –±–ª–∏–∂–µ –∫ 2Ô∏è‚É£1Ô∏è‚É£. \n–ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑üòú!')
                    else:
                        bot.send_message(call.message.chat.id,
                                         '–ü–æ–∑–¥—Ä–∞–≤–ª—è—éü•≥!\n–¢—ã –±—ã–ª –±–ª–∏–∂–µ –∫ 2Ô∏è‚É£1Ô∏è‚É£ –∏ –ø–æ–±–µ–¥–∏–ª –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!')
                elif s < 21 and s_b > 21:
                    bot.send_message(call.message.chat.id,
                                     '–ü–æ–∑–¥—Ä–∞–≤–ª—è—éü•≥!\n–¢—ã –ø–æ–±–µ–¥–∏–ª –≤ —ç—Ç–æ–π –∏–≥—Ä–µ! \n–ê –≤–æ—Ç —É –ë–æ—Ç–∞ –ø–µ—Ä–µ–±–æ—Äüòì')
                else:
                    bot.send_message(call.message.chat.id,
                                     '–í —ç—Ç–æ–π –∏–≥—Ä–µ –ø–æ–±–µ–¥–∏–ª –ë–æ—Ç! \n–ê –≤–æ—Ç —É —Ç–µ–±—è –ø–µ—Ä–µ–±–æ—Äüòì. \n–ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑üòú!')
                    # —É–¥–∞–ª–µ–Ω–∏–µ
                dest = DeckDb(db, call.message.chat.id)
                dest.destroyDeck()

                bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                          text="–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!")

    except Exception as e:
        print(repr(e))


bot.polling(none_stop=True)
